// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Synapxe.FhirWebApi.PostgresDoc.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Environment:Integration")]
    public partial class FhirEngineFeature : object, Xunit.IClassFixture<FhirEngineFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Environment:Integration"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "FhirEngine", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "fhirengine.feature"
#line hidden
        
        public FhirEngineFeature(FhirEngineFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                        "HeaderName",
                        "Value"});
#line 5
    await testRunner.GivenAsync("a new HttpClient as unauthenticatedHttpClient", ((string)(null)), table28, "Given ");
#line hidden
            global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                        "HeaderName",
                        "Value"});
            table29.AddRow(new string[] {
                        "x-api-key",
                        "testapp"});
#line 7
    await testRunner.AndAsync("a new HttpClient as authenticatedHttpClient", ((string)(null)), table29, "And ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reading a nonexistent resource from an unauthenticated client returns 401 status " +
            "code")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Reading a nonexistent resource from an unauthenticated client returns 401 status " +
            "code")]
        [Xunit.TraitAttribute("Category", "HttpClient:unauthenticatedHttpClient")]
        public async global::System.Threading.Tasks.Task ReadingANonexistentResourceFromAnUnauthenticatedClientReturns401StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:unauthenticatedHttpClient"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Reading a nonexistent resource from an unauthenticated client returns 401 status " +
                    "code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 13
    await testRunner.WhenAsync("getting Appointment/{newguid} as readAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value"});
                table30.AddRow(new string[] {
                            "statusCode",
                            "401"});
#line 14
    await testRunner.ThenAsync("readAppt is a Fhir OperationOutcome with data", ((string)(null)), table30, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reading a nonexistent resource from an authenticated client returns 404 status co" +
            "de")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Reading a nonexistent resource from an authenticated client returns 404 status co" +
            "de")]
        [Xunit.TraitAttribute("Category", "HttpClient:authenticatedHttpClient")]
        public async global::System.Threading.Tasks.Task ReadingANonexistentResourceFromAnAuthenticatedClientReturns404StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:authenticatedHttpClient"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Reading a nonexistent resource from an authenticated client returns 404 status co" +
                    "de", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 20
    await testRunner.WhenAsync("getting Appointment/{newguid} as readAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value"});
                table31.AddRow(new string[] {
                            "statusCode",
                            "404"});
#line 21
    await testRunner.ThenAsync("readAppt is a Fhir OperationOutcome with data", ((string)(null)), table31, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Metadata endpoint returns the CapabilityStatement with valid canonical links")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Metadata endpoint returns the CapabilityStatement with valid canonical links")]
        [Xunit.TraitAttribute("Category", "HttpClient:authenticatedHttpClient")]
        public async global::System.Threading.Tasks.Task MetadataEndpointReturnsTheCapabilityStatementWithValidCanonicalLinks()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:authenticatedHttpClient"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Metadata endpoint returns the CapabilityStatement with valid canonical links", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 27
    await testRunner.WhenAsync("getting metadata as metadata", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
    await testRunner.ThenAsync("metadata is a Fhir CapabilityStatement with resolvable links", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Metadata endpoint is accessible without authentication")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Metadata endpoint is accessible without authentication")]
        [Xunit.TraitAttribute("Category", "HttpClient:unauthenticatedHttpClient")]
        public async global::System.Threading.Tasks.Task MetadataEndpointIsAccessibleWithoutAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:unauthenticatedHttpClient"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Metadata endpoint is accessible without authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 32
    await testRunner.WhenAsync("getting metadata as metadata", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
    await testRunner.ThenAsync("metadata has statusCode 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Health endpoint returns 200 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Health endpoint returns 200 status code")]
        [Xunit.TraitAttribute("Category", "HttpClient:authenticatedHttpClient")]
        public async global::System.Threading.Tasks.Task HealthEndpointReturns200StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:authenticatedHttpClient"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Health endpoint returns 200 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 37
    await testRunner.WhenAsync("getting /health?_pretty=true as health", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
    await testRunner.ThenAsync("health has statusCode 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Swagger endpoint returns 200 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Swagger endpoint returns 200 status code")]
        [Xunit.TraitAttribute("Category", "HttpClient:unauthenticatedHttpClient")]
        public async global::System.Threading.Tasks.Task SwaggerEndpointReturns200StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:unauthenticatedHttpClient"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Swagger endpoint returns 200 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 43
    await testRunner.WhenAsync("getting /swagger/v1/swagger.json as openapi", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
    await testRunner.ThenAsync("openapi has statusCode 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prometheus scraping endpoint returns 200 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Prometheus scraping endpoint returns 200 status code")]
        [Xunit.TraitAttribute("Category", "HttpClient:unauthenticatedHttpClient")]
        public async global::System.Threading.Tasks.Task PrometheusScrapingEndpointReturns200StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:unauthenticatedHttpClient"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Prometheus scraping endpoint returns 200 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 50
    await testRunner.WhenAsync("getting /metrics as metrics", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 51
    await testRunner.ThenAsync("metrics has statusCode 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await FhirEngineFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await FhirEngineFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
