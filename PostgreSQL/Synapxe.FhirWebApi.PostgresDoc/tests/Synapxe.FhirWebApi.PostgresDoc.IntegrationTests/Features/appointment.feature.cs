// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Synapxe.FhirWebApi.PostgresDoc.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Environment:Integration")]
    public partial class AppointmentFeature : object, Xunit.IClassFixture<AppointmentFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Environment:Integration"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Appointment", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "appointment.feature"
#line hidden
        
        public AppointmentFeature(AppointmentFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
#line 5
    await testRunner.GivenAsync("a random tag", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "HeaderName",
                        "Value"});
            table1.AddRow(new string[] {
                        "x-api-key",
                        "testapp"});
#line 6
    await testRunner.AndAsync("a new HttpClient as httpClient", ((string)(null)), table1, "And ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reading a newly created appointment returns exactly the same appointment")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Reading a newly created appointment returns exactly the same appointment")]
        public async global::System.Threading.Tasks.Task ReadingANewlyCreatedAppointmentReturnsExactlyTheSameAppointment()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Reading a newly created appointment returns exactly the same appointment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 11
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
    await testRunner.WhenAsync("getting Appointment/{createdAppt.Id} as readAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value"});
                table2.AddRow(new string[] {
                            "statusCode",
                            "201"});
#line 13
    await testRunner.ThenAsync("createdAppt is a Fhir Appointment with data", ((string)(null)), table2, "Then ");
#line hidden
#line 16
    await testRunner.AndAsync("createdAppt and readAppt are exactly the same", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create an appointment with a start date in the past returns 422 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Create an appointment with a start date in the past returns 422 status code")]
        [Xunit.InlineDataAttribute("2000-01-01T12:00:00+08:00", new string[0])]
        [Xunit.InlineDataAttribute("1985-01-01T12:00:00+08:00", new string[0])]
        public async global::System.Threading.Tasks.Task CreateAnAppointmentWithAStartDateInThePastReturns422StatusCode(string startDateTime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("startDateTime", startDateTime);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create an appointment with a start date in the past returns 422 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table3.AddRow(new string[] {
                            "start",
                            string.Format("{0}", startDateTime),
                            "instant"});
#line 19
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json with data as createdResponse", ((string)(null)), table3, "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table4.AddRow(new string[] {
                            "statusCode",
                            "422",
                            ""});
                table4.AddRow(new string[] {
                            "issue[0].severity",
                            "error",
                            "code"});
                table4.AddRow(new string[] {
                            "issue[0].details.text",
                            "Instance failed constraint ihis-apt-1 \"If present, start SHALL have a higher valu" +
                                "e than current date time\"",
                            "string"});
#line 22
    await testRunner.ThenAsync("createdResponse is a Fhir OperationOutcome with data", ((string)(null)), table4, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Searching an appointment by patient returns the appointment")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Searching an appointment by patient returns the appointment")]
        public async global::System.Threading.Tasks.Task SearchingAnAppointmentByPatientReturnsTheAppointment()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Searching an appointment by patient returns the appointment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table5.AddRow(new string[] {
                            "participant[0].actor",
                            "Patient/{#pat1}",
                            "Reference"});
#line 34
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json with data as newAppt", ((string)(null)), table5, "Given ");
#line hidden
#line 37
    await testRunner.WhenAsync("getting Appointment?patient=Patient/{#pat1} as searchBundle", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
    await testRunner.ThenAsync("searchBundle is a Fhir Bundle which contains newAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Searching an appointment by actor returns the appointment with correct sort")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Searching an appointment by actor returns the appointment with correct sort")]
        public async global::System.Threading.Tasks.Task SearchingAnAppointmentByActorReturnsTheAppointmentWithCorrectSort()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Searching an appointment by actor returns the appointment with correct sort", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table6.AddRow(new string[] {
                            "participant[0].actor",
                            "Patient/{#pat2}",
                            "Reference"});
                table6.AddRow(new string[] {
                            "start",
                            "2125-01-01T12:00:00+08:00",
                            "instant"});
                table6.AddRow(new string[] {
                            "end",
                            "2125-01-01T12:00:00+08:00",
                            "instant"});
#line 41
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json with data as newAppt1", ((string)(null)), table6, "Given ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table7.AddRow(new string[] {
                            "participant[0].actor",
                            "Patient/{#pat3}",
                            "Reference"});
                table7.AddRow(new string[] {
                            "start",
                            "2125-02-01T12:00:00+08:00",
                            "instant"});
                table7.AddRow(new string[] {
                            "end",
                            "2125-02-01T12:00:00+08:00",
                            "instant"});
#line 46
    await testRunner.AndAsync("a Resource is created from Samples/Appointment.json with data as newAppt2", ((string)(null)), table7, "And ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table8.AddRow(new string[] {
                            "participant[0].actor",
                            "Patient/{#pat2}",
                            "Reference"});
                table8.AddRow(new string[] {
                            "start",
                            "2125-03-01T12:00:00+08:00",
                            "instant"});
                table8.AddRow(new string[] {
                            "end",
                            "2125-03-01T12:00:00+08:00",
                            "instant"});
#line 51
    await testRunner.AndAsync("a Resource is created from Samples/Appointment.json with data as newAppt3", ((string)(null)), table8, "And ");
#line hidden
#line 56
    await testRunner.WhenAsync("getting Appointment?actor=Patient/{#pat2}&_sort=_lastUpdated as searchBundle", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
    await testRunner.ThenAsync("searchBundle is a Fhir Bundle which contains newAppt1,newAppt3", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Searching an appointment by date returns the appointment")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Searching an appointment by date returns the appointment")]
        public async global::System.Threading.Tasks.Task SearchingAnAppointmentByDateReturnsTheAppointment()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Searching an appointment by date returns the appointment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table9.AddRow(new string[] {
                            "start",
                            "2122-01-01T12:00:00+08:00",
                            "instant"});
                table9.AddRow(new string[] {
                            "end",
                            "2122-01-01T12:00:00+08:00",
                            "instant"});
#line 60
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json with data as newAppt", ((string)(null)), table9, "Given ");
#line hidden
#line 64
    await testRunner.WhenAsync("getting Appointment?date=2122-01-01&_tag={currentTag} as searchBundle", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 65
    await testRunner.ThenAsync("searchBundle is a Fhir Bundle which contains newAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Moving an appointment returns 200")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Moving an appointment returns 200")]
        public async global::System.Threading.Tasks.Task MovingAnAppointmentReturns200()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Moving an appointment returns 200", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 70
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value",
                            "FhirType"});
                table10.AddRow(new string[] {
                            "days-in-future",
                            "5",
                            "integer"});
#line 71
    await testRunner.WhenAsync("executing operation Appointment/{createdAppt.Id}/$move-appointment-date with data" +
                        " as updatedAppt", ((string)(null)), table10, "When ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table11.AddRow(new string[] {
                            "statusCode",
                            "200",
                            ""});
#line 74
    await testRunner.ThenAsync("updatedAppt is a Fhir Appointment with data", ((string)(null)), table11, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Updating a newly created appointment with an invalid cancellation reason returns " +
            "422")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Updating a newly created appointment with an invalid cancellation reason returns " +
            "422")]
        public async global::System.Threading.Tasks.Task UpdatingANewlyCreatedAppointmentWithAnInvalidCancellationReasonReturns422()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Updating a newly created appointment with an invalid cancellation reason returns " +
                    "422", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 80
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table12.AddRow(new string[] {
                            "status",
                            "cancelled",
                            "code"});
                table12.AddRow(new string[] {
                            "cancellationReason",
                            "xyz",
                            "CodeableConcept"});
#line 81
    await testRunner.WhenAsync("updating Appointment/{createdAppt.Id} with data as updatedAppt", ((string)(null)), table12, "When ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table13.AddRow(new string[] {
                            "statusCode",
                            "422",
                            ""});
                table13.AddRow(new string[] {
                            "issue[0].severity",
                            "error",
                            "code"});
                table13.AddRow(new string[] {
                            "issue[0].code",
                            "code-invalid",
                            "code"});
                table13.AddRow(new string[] {
                            "issue[0].details.text",
                            "Code \'xyz\' does not exist in the value set \'Care Programs\' (http://sypnapxe.sg/fh" +
                                "ir/ValueSet/appointmentCancellationReason)",
                            "code"});
#line 85
    await testRunner.ThenAsync("updatedAppt is a Fhir OperationOutcome with data", ((string)(null)), table13, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelling a nonexistent appointment returns 404 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Cancelling a nonexistent appointment returns 404 status code")]
        public async global::System.Threading.Tasks.Task CancellingANonexistentAppointmentReturns404StatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Cancelling a nonexistent appointment returns 404 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value",
                            "FhirType"});
                table14.AddRow(new string[] {
                            "cancellationReason",
                            "lost-interest",
                            "CodeableConcept"});
#line 93
    await testRunner.WhenAsync("executing operation Appointment/{newguid}/$cancel with data as cancellationRespon" +
                        "se", ((string)(null)), table14, "When ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value"});
                table15.AddRow(new string[] {
                            "statusCode",
                            "404"});
#line 96
    await testRunner.ThenAsync("cancellationResponse is a Fhir OperationOutcome with data", ((string)(null)), table15, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelling an appointment with an invalid cancellation reason returns 422 status " +
            "code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Cancelling an appointment with an invalid cancellation reason returns 422 status " +
            "code")]
        public async global::System.Threading.Tasks.Task CancellingAnAppointmentWithAnInvalidCancellationReasonReturns422StatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Cancelling an appointment with an invalid cancellation reason returns 422 status " +
                    "code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 101
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json as createdAppointment", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value",
                            "FhirType"});
                table16.AddRow(new string[] {
                            "cancellationReason",
                            "abc",
                            "CodeableConcept"});
#line 102
    await testRunner.WhenAsync("executing operation Appointment/{createdAppointment.Id}/$cancel with data as canc" +
                        "ellationResponse", ((string)(null)), table16, "When ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table17.AddRow(new string[] {
                            "statusCode",
                            "422",
                            ""});
                table17.AddRow(new string[] {
                            "issue[0].severity",
                            "error",
                            "code"});
                table17.AddRow(new string[] {
                            "issue[0].code",
                            "code-invalid",
                            "code"});
                table17.AddRow(new string[] {
                            "issue[0].details.text",
                            "Code \'abc\' does not exist in the value set \'Care Programs\' (http://sypnapxe.sg/fh" +
                                "ir/ValueSet/appointmentCancellationReason)",
                            "code"});
#line 105
    await testRunner.ThenAsync("cancellationResponse is a Fhir OperationOutcome with data", ((string)(null)), table17, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Updating a newly created appointment returns an appointment with an incremented v" +
            "ersionId")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Updating a newly created appointment returns an appointment with an incremented v" +
            "ersionId")]
        public async global::System.Threading.Tasks.Task UpdatingANewlyCreatedAppointmentReturnsAnAppointmentWithAnIncrementedVersionId()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Updating a newly created appointment returns an appointment with an incremented v" +
                    "ersionId", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 115
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table18.AddRow(new string[] {
                            "description",
                            "For followup",
                            "string"});
#line 116
    await testRunner.WhenAsync("updating Appointment/{createdAppt.Id} with data as updatedAppt", ((string)(null)), table18, "When ");
#line hidden
#line 119
    await testRunner.AndAsync("getting Appointment/{createdAppt.Id}/_history/2 as readUpdatedAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 120
    await testRunner.ThenAsync("updatedAppt and readUpdatedAppt are exactly the same", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value"});
                table19.AddRow(new string[] {
                            "statusCode",
                            "200"});
                table19.AddRow(new string[] {
                            "headers.eTag",
                            "W/\"2\""});
#line 121
    await testRunner.AndAsync("updatedAppt is a Fhir Appointment with data", ((string)(null)), table19, "And ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table20.AddRow(new string[] {
                            "description",
                            "For followup",
                            "string"});
                table20.AddRow(new string[] {
                            "meta.versionId",
                            "2",
                            "string"});
#line 125
    await testRunner.AndAsync("readUpdatedAppt is a Fhir Appointment with data", ((string)(null)), table20, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Creating an appointment where same participant is in a different appointment with" +
            " the same schedule returns 422 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Creating an appointment where same participant is in a different appointment with" +
            " the same schedule returns 422 status code")]
        public async global::System.Threading.Tasks.Task CreatingAnAppointmentWhereSameParticipantIsInADifferentAppointmentWithTheSameScheduleReturns422StatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Creating an appointment where same participant is in a different appointment with" +
                    " the same schedule returns 422 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table21.AddRow(new string[] {
                            "participant[0].actor",
                            "Practitioner/{#prac1}",
                            "Reference"});
                table21.AddRow(new string[] {
                            "participant[0].status",
                            "tentative",
                            "code"});
                table21.AddRow(new string[] {
                            "start",
                            "{#schedtime(datetime+2d)}",
                            "instant"});
#line 131
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json with data as existingAppt", ((string)(null)), table21, "Given ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table22.AddRow(new string[] {
                            "participant[0].actor",
                            "Practitioner/{#prac1}",
                            "Reference"});
                table22.AddRow(new string[] {
                            "participant[0].status",
                            "tentative",
                            "code"});
                table22.AddRow(new string[] {
                            "start",
                            "{#schedtime(datetime+2d)}",
                            "instant"});
#line 136
    await testRunner.WhenAsync("creating from Samples/Appointment.json with data as createdResponse", ((string)(null)), table22, "When ");
#line hidden
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table23.AddRow(new string[] {
                            "statusCode",
                            "422",
                            ""});
                table23.AddRow(new string[] {
                            "issue[0].severity",
                            "error",
                            "code"});
                table23.AddRow(new string[] {
                            "issue[0].code",
                            "invalid",
                            "code"});
                table23.AddRow(new string[] {
                            "issue[0].diagnostics",
                            "Appointment participant has another appointment for that date.",
                            "string"});
#line 141
    await testRunner.ThenAsync("createdResponse is a Fhir OperationOutcome with data", ((string)(null)), table23, "Then ");
#line hidden
#line 147
    await testRunner.AndAsync("existingAppt is a Fhir Appointment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelling an appointment returns appointment with cancelled status and increment" +
            "ed version")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Cancelling an appointment returns appointment with cancelled status and increment" +
            "ed version")]
        public async global::System.Threading.Tasks.Task CancellingAnAppointmentReturnsAppointmentWithCancelledStatusAndIncrementedVersion()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Cancelling an appointment returns appointment with cancelled status and increment" +
                    "ed version", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 150
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json as createdAppointment", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value",
                            "FhirType"});
                table24.AddRow(new string[] {
                            "cancellationReason",
                            "lost-interest",
                            "CodeableConcept"});
#line 151
    await testRunner.WhenAsync("executing operation Appointment/{createdAppointment.Id}/$cancel with data as canc" +
                        "ellationResponse", ((string)(null)), table24, "When ");
#line hidden
#line 154
    await testRunner.AndAsync("getting Appointment/{cancellationResponse.Id} as readAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table25.AddRow(new string[] {
                            "statusCode",
                            "200",
                            ""});
                table25.AddRow(new string[] {
                            "meta.versionId",
                            "2",
                            "string"});
                table25.AddRow(new string[] {
                            "status",
                            "cancelled",
                            "code"});
                table25.AddRow(new string[] {
                            "cancellationReason",
                            "lost-interest",
                            "CodeableConcept"});
#line 155
    await testRunner.ThenAsync("cancellationResponse is a Fhir Appointment with data", ((string)(null)), table25, "Then ");
#line hidden
#line 161
    await testRunner.AndAsync("cancellationResponse and readAppt are exactly the same", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Updating an appointment resource with a mismatch of id in the body and path retur" +
            "ns 400 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Updating an appointment resource with a mismatch of id in the body and path retur" +
            "ns 400 status code")]
        public async global::System.Threading.Tasks.Task UpdatingAnAppointmentResourceWithAMismatchOfIdInTheBodyAndPathReturns400StatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Updating an appointment resource with a mismatch of id in the body and path retur" +
                    "ns 400 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 163
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 164
    await testRunner.GivenAsync("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table26.AddRow(new string[] {
                            "description",
                            "For followup",
                            "string"});
                table26.AddRow(new string[] {
                            "id",
                            "{newguid}",
                            "id"});
#line 165
    await testRunner.WhenAsync("updating createdAppt with data as updatedAppt", ((string)(null)), table26, "When ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table27.AddRow(new string[] {
                            "statusCode",
                            "400",
                            ""});
                table27.AddRow(new string[] {
                            "issue[0].diagnostics",
                            "Resource ID in resource does not match with Resource ID in path.",
                            "string"});
#line 169
    await testRunner.ThenAsync("updatedAppt is a Fhir OperationOutcome with data", ((string)(null)), table27, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AppointmentFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AppointmentFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
